<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>梦璃酱</title><description>YumeYuka Blog of Dreams</description><link>https://www.yumeyuka.plus/</link><language>zh_CN</language><item><title>Pages × CDN：跳转的另一边</title><link>https://www.yumeyuka.plus/posts/apex-to-www/</link><guid isPermaLink="true">https://www.yumeyuka.plus/posts/apex-to-www/</guid><description>Pages酱遇到CDN君就会报418，还不听话的Apex只好靠重定向魔法解决啦～</description><pubDate>Fri, 26 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前情提要&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;https://www.yumeyuka.plus/posts/edgeone-gh/&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;结论：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果 Pages 直接解析到 CDN 节点，会返回一个 &lt;code&gt;418&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果要 Pages 再套一层 CDN 节点则不能直接 CNAME 到分配的解析记录，需要绑定一个中转的子域名， 然后由需要加速的域名的源站填写中转的域名，否则同上返回 &lt;code&gt;418&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apex 不适用上面方法，即不能通过子域中转，且与自定义 &lt;code&gt;NS&lt;/code&gt; &lt;code&gt;DNSSEC&lt;/code&gt;  冲突，同上返回 &lt;code&gt;418&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pages 不能进行优选，且无意义，无论国际站还是国内站，如果部署区域为非大陆，非大陆网络可正常访问，大陆网络返回 &lt;code&gt;401&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非大陆站点，即境外站点，例如 &lt;code&gt;GitHub Pages Vercel Netlify Cloudflare Pgaes / Work&lt;/code&gt; 等，使用 CDN 加速无意义&lt;/li&gt;
&lt;li&gt;重复第三条，当 Apex 和 www 子域及其它变体绑定到同一  Pages 时，无法通过 &lt;code&gt;edgeone.json&lt;/code&gt; 进行重定向，此处需要满足同时使用第二条，否则无限重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;那么如何解决 Apex 重定向到 www 子域呢&lt;/h2&gt;
&lt;p&gt;方法有很多，这里我通过使用分2个 Pages 项目部署，将 Apex 绑定到新的 Pages 项目，新建 &lt;code&gt;index.html&lt;/code&gt;  &lt;code&gt;edgeone.json&lt;/code&gt; 进行重定向，需要在 index.html中填入和需要重定向内容相同的 &lt;code&gt;head&lt;/code&gt; 内容，例如 og 这种&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh-CN&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
    &amp;lt;title&amp;gt;梦璃酱 - YumeYuka Blog of Dreams&amp;lt;/title&amp;gt;
    
    &amp;lt;!-- 重定向 --&amp;gt;
    &amp;lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=https://www.yumeyuka.plus/&quot;&amp;gt;
    
    &amp;lt;!-- 规范链接 --&amp;gt;
    &amp;lt;link rel=&quot;canonical&quot; href=&quot;https://www.yumeyuka.plus/&quot;&amp;gt;
    
    &amp;lt;!-- 基本SEO标签 --&amp;gt;
    &amp;lt;meta name=&quot;description&quot; content=&quot;梦璃酱 - YumeYuka Blog of Dreams&quot;&amp;gt;
    &amp;lt;meta name=&quot;author&quot; content=&quot;梦璃酱 - YumeYuka&quot;&amp;gt;
    &amp;lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot;&amp;gt;
    
    &amp;lt;!-- Open Graph 标签 --&amp;gt;
    &amp;lt;meta property=&quot;og:site_name&quot; content=&quot;梦璃酱&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:locale&quot; content=&quot;zh_CN&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:url&quot; content=&quot;https://www.yumeyuka.plus/&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:title&quot; content=&quot;一つの心臓の両面に傷を負う&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:image&quot; content=&quot;https://s3.yumeyuka.plus/2025/23-22-30.webp&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:image:secure_url&quot; content=&quot;https://s3.yumeyuka.plus/2025/23-22-30.webp&quot;&amp;gt;
    
    &amp;lt;meta property=&quot;og:image:width&quot; content=&quot;1200&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:image:height&quot; content=&quot;630&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:image:type&quot; content=&quot;image/webp&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:type&quot; content=&quot;website&quot;&amp;gt;
    
    &amp;lt;!-- Twitter 卡片标签 --&amp;gt;
    &amp;lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&amp;gt;
    &amp;lt;meta name=&quot;twitter:site&quot; content=&quot;梦璃酱&quot;&amp;gt;
    &amp;lt;meta property=&quot;twitter:url&quot; content=&quot;https://www.yumeyuka.plus/&quot;&amp;gt;
    &amp;lt;meta name=&quot;twitter:title&quot; content=&quot;一つの心臓の両面に傷を負う&quot;&amp;gt;
    &amp;lt;meta name=&quot;twitter:image&quot; content=&quot;https://s3.yumeyuka.plus/2025/23-22-30.webp&quot;&amp;gt;
    
    &amp;lt;!-- Telegram 专用标签 --&amp;gt;
    &amp;lt;meta property=&quot;telegram:channel&quot; content=&quot;@yumeyuka&quot;&amp;gt;
    
    &amp;lt;!-- 图标 --&amp;gt;
    &amp;lt;link rel=&quot;icon&quot; href=&quot;https://s3.yumeyuka.plus/2025/Image_1758222788424.webp&quot; type=&quot;image/webp&quot;&amp;gt;
    
    &amp;lt;!-- JavaScript重定向（备用方案） --&amp;gt;
    &amp;lt;script&amp;gt;
        window.location.replace(&quot;https://www.yumeyuka.plus/&quot;);
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;redirects&quot;: [
      {
        &quot;source&quot;: &quot;$host&quot;,
        &quot;destination&quot;: &quot;$wwwhost&quot;,
        &quot;statusCode&quot;: 301
      }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;如何解析&lt;/h2&gt;
&lt;p&gt;将以上代码 部署到 Pages 新的项目，将apex 域，或者你想重定向的域解析到这个。
将源站项目添加子域中转，CDN 加速页选择回源策略使用源站，虽然是有点沙雕，但是没办法的权宜之计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/09/caff028c6ffdf2f8739643e99854333e.webp&quot; alt=&quot;image-20250926163605280&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/09/8f8889b95224d1163028a49f25455a73.webp&quot; alt=&quot;image-20250926163620315&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/09/7d07df27da68d39948e7b374369afc65.webp&quot; alt=&quot;image-20250926163644689&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>从 EdgeOne 开始的奇妙旅程——加速你的 GitHub 图床</title><link>https://www.yumeyuka.plus/posts/edgeone-gh/</link><guid isPermaLink="true">https://www.yumeyuka.plus/posts/edgeone-gh/</guid><description>带你揭秘图床加速的神奇世界，了解怎么用 Cloudflare 和 EdgeOne 魔法，让你的图片飞起来！✨</description><pubDate>Tue, 23 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;刚写完这个才发现有问题，如果 EO 是 NS 接入的话，可能会有问题， EO Pages 不能直接 CNAME 到 CDN  的节点，会直接 418 返回. EO 的 NS 接入坑还是有点多的，但是如果是域名在 CF 直接 cname 到 EO  还是会有问题，首先就是 CF 会默认给展平 APEX 域，这样 EO 那边就 永远不会到 CNAME 到，算是一个比较麻烦的问题，当然可以重定向解决这个问题，如果是 使用　CF Work 的话就需要域名解析商在 CF。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;/p&gt;
&lt;p&gt;此文章现在已经失效了，如果非要做图床可以考虑使用EO Pages 然后 直接 A 记录到 IP，国内 CDN 无法加速境外的站点，官方是这样说的 https://cloud.tencent.com/developer/tutorial/practice/1017&lt;/p&gt;
&lt;p&gt;也就是说这些已经不适用了，如果是直接优选香港节点的话 会直接得到解析失败，在反复折腾了 3填之后还是放弃了，目前已经不适用了，硬要优选还不如 cf&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/09/814336ab2ef7f351a79f95de8d24cf69.webp&quot; alt=&quot;image-20250926001633263&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/09/5ebcb53f599a261df4152b074f1aae29.webp&quot; alt=&quot;image-20250926001242062&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;使用项目&lt;/h2&gt;
&lt;p&gt;实现开始之前，需要准备一个域名，备案最好，不备案建议使用cf 优选，不要用eo 了&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;cmliu/CF-Workers-Raw&quot;}&lt;/p&gt;
&lt;p&gt;这个项目一开始是在 &lt;code&gt;Cloudflare Work&lt;/code&gt; 部署的后来 &lt;code&gt;Edgeone pages&lt;/code&gt; 出来之后，有人开了个 issue 就支持了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/cmliu/CF-Workers-Raw/issues/9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-21-40.webp&quot; alt=&quot;23-21-40.webp&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;延迟数据&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-21-48.webp&quot; alt=&quot;23-21-48.webp&quot; /&gt;&lt;/p&gt;
&lt;p&gt;EO Pages 和 cdn 节点不一样，pages 最多给分配30个节点，由于直接这样用国内的cdn节点直接去代理 GitHub 文件肯定是不行的&lt;/p&gt;
&lt;p&gt;平时绝大多数地方直接访问大概率也是被墙的 &lt;code&gt;GFW&lt;/code&gt; 发力了，想要做代理，那就需要去用到 EO 给分配的香港节点，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]&lt;/p&gt;
&lt;p&gt;EO 刚出来的时候确实是白月光，即使没备案直接 优选 香港节点，延迟优化很错，差不多相当于是全绿了&lt;/p&gt;
&lt;p&gt;但是后面 8 月 初就开始砍了，现在优选 香港节点的话大概率会直接得到 &lt;code&gt;418&lt;/code&gt; 状态码，这样开来还不让直接优选 cf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先把这项目自己 Fork 一份 ，用 CF 代理也行 用 EO pages 也行,没备案建议使用 cf work 优选,&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;cmliu/CF-Workers-Raw&quot;}&lt;/p&gt;
&lt;p&gt;然后再 cf work 或者 eo pages 直接直接链接账户 导入 &lt;code&gt;Edgeone&lt;/code&gt; 分支, cf 是默认的 &lt;code&gt;mian&lt;/code&gt; 分支 ,部署之后需要绑定
自定义的域名访问，，然后有以下3种方案&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;cf work + eo cdn&lt;/th&gt;
&lt;th&gt;体验最好&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cf work +　cf 优选&lt;/td&gt;
&lt;td&gt;推荐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eo pages +　eo 优选&lt;/td&gt;
&lt;td&gt;推荐&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以第一种为例，运行work 部署运行之后然后需要在 work 绑定自定义域名，然后在 EO 的站点添加 cdn 配置，然后解析 cname ,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]&lt;/p&gt;
&lt;p&gt;如果 eo 是NS 接入的话就需要2个域名，一个在 cf work 一个用于 eo cdn 分发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-22-10.webp&quot; alt=&quot;23-22-10.webp&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在 SSL 证书申请选择： 建议使用 腾讯云 申请 SSL 的证书，至于为什么因为后面优选 IP 需要用到 ，优选 IP 原有的 cname 记录会失效，然后
A 记录直接解析到优选 IP ，如果选择申请免费的证书，cname 失效之后会导致 续签失败，建议直接使用 腾讯云申请的 SSL 证书，选择
DNS验证然后不用删记录，直接等它自己续费就好了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-22-16.webp&quot; alt=&quot;23-22-16.webp&quot; /&gt;&lt;/p&gt;
&lt;p&gt;然后优选 IP ，直接优选 香港 IP ，具体 IP段去看其他文档或者其他人写的 blog，如果你是CF 部署这里才用到下面的 IP ，否则如果是 将 EO CDN 的节点解析到 Pages 会直接返回 &lt;code&gt;418&lt;/code&gt; 报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    43.174.150.199
    43.174.150.119
    43.174.151.16
    43.174.151.120
    43.174.151.58
    43.174.150.6
    43.174.150.123
    43.174.151.214
    43.174.151.241
    43.174.151.165
    43.174.150.111
    43.174.151.2
    43.174.151.243
    43.174.150.132
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Github 配置&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;setting&lt;/code&gt; 生成一个 token 然后 使用 &lt;code&gt;piclist picgo&lt;/code&gt; 等其他的图床工具，配合 &lt;code&gt;Typora&lt;/code&gt; 写，确实很不错的&lt;/p&gt;
&lt;p&gt;注意 自定义域名部分, 拼接部分需要注意，相对于使用 eo pages 然后去链接 &lt;code&gt;GitHub&lt;/code&gt; 储存库然后每次上传都要 build 好很多&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.yumeyuka.plus/Keira-Yuki/picture/refs/heads/Yume/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-22-27.webp&quot; alt=&quot;23-22-27.webp&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;图片示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://s3.yumeyuka.plus/2025/23-22-30.webp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-22-30.webp&quot; alt=&quot;23-22-30.webp&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>网易云·静寂小魔法</title><link>https://www.yumeyuka.plus/posts/cloudpress/</link><guid isPermaLink="true">https://www.yumeyuka.plus/posts/cloudpress/</guid><description>可恶的网易云！明明只是想安静听歌，结果还要跟压制模块斗智斗勇(&gt;_&lt;)</description><pubDate>Mon, 07 Jul 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;本来一个月前就该发出来的，最近突然想起来还没发出来，
这一版相比之前没什么区别，还是建议更新到此版本，上版是 &lt;code&gt;CPP&lt;/code&gt; 写的，这一版用 &lt;code&gt;kotlin native&lt;/code&gt; 重写了,逻辑上没有变化，还是监听前台进程然后kill
掉多余的不需要的服务&lt;/p&gt;
&lt;p&gt;国内的毒瘤 APP 都太多了，点名网易云最为代表，听歌 APP 什么都有，本来性能就很差，还要在后台留一堆不需要的服务，太坏了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!NOTE]&lt;/p&gt;
&lt;p&gt;非常 素晴らしい&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;编写语言&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;kotlin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;压制效果&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;中等，不知道网易云太坏了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bug&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;几乎没有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;评价&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;能用，但不多，治标不治本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;下载链接&lt;/strong&gt;：&lt;a href=&quot;https://yumeyuka.plus/zip/Yume-Yunyun.zip&quot;&gt;Yume-Yunyun.zip&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;示例伪代码&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#include &quot;head.hpp&quot;

main() 
    Logger::Create(INFO, &quot;/sdcard/Android/Yume-Yunyun/server.log&quot;)
    start_thread(clearLog).detach()

    cloudMusicPackage = &quot;com.netease.cloudmusic&quot;
    playProcess = &quot;com.netease.cloudmusic:play&quot;
    CHECK_INTERVAL = 30

    Logger::Info(&quot;服务已启动，监控网易云音乐进程&quot;)

    while (true)
        if (!isAppRunning(cloudMusicPackage))
            sleep(CHECK_INTERVAL)
            continue

        currentAppName = getCurrentAppName()
        Logger::Info(&quot;当前前台应用: &quot; + currentAppName)

        if (currentAppName 不包含 cloudMusicPackage)
            processes = getAppProcessesAndPIDs(cloudMusicPackage)
            Logger::Info(&quot;网易云不在前台，找到进程数：&quot; + processes.size())

            if (processes 为空)
                Logger::Info(&quot;没有找到进程，等待下一次检查&quot;)
            else
                for each process in processes
                    if (process.name 包含 playProcess)
                        Logger::Info(&quot;保留播放进程: &quot; + process.name + &quot;, PID: &quot; + process.pid)
                    else
                        Logger::Info(&quot;终止进程: &quot; + process.name + &quot;, PID: &quot; + process.pid)
                        killProcess(process.pid)
        else
            Logger::Info(&quot;网易云音乐在前台，不做操作&quot;)
        
        sleep(CHECK_INTERVAL)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxxxxxxxxx // 动态显示数码管void DisplaySMG_Dynamic() {  SelectBit(0);  SelectSegment(SMG_NoDot[hour / 10]);  DelaySMG(500);​  SelectBit(1);  SelectSegment(SMG_NoDot[hour % 10]);  DelaySMG(500);​  SelectBit(2);  SelectSegment(SMG_NoDot[16]);  DelaySMG(500);​  SelectBit(3);  SelectSegment(SMG_NoDot[minute / 10]);  DelaySMG(500);​  SelectBit(4);  SelectSegment(SMG_NoDot[minute % 10]);  DelaySMG(500);​  SelectBit(5);  SelectSegment(SMG_NoDot[16]);  DelaySMG(500);​  SelectBit(6);  SelectSegment(SMG_NoDot[second / 10]);  DelaySMG(500);​  SelectBit(7);  SelectSegment(SMG_NoDot[second % 10]);  DelaySMG(500);}​c&lt;/p&gt;
&lt;p&gt;Kt Native 编译出来的目标 ELF 大小上和 C++ 差距不大,但是运行时内存占用可谓是天差地别 ,差了近 10 倍 的内存占用 ,当然 Kt
Native 会自动 GC 回收内存, 以本模块为例,大概 刚运行时为 50M 一段时间之后 GC 会到25M ,差不多回收了 1/2 但是和 C++
编译出来还是差距很大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]&lt;/p&gt;
&lt;p&gt;Kt Native MacOS 和 IOS 为大致为第一梯队 , Linux 差不多为第二梯队, Android 和Windows差不多就是第三梯队了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/23-21-09.webp&quot; alt=&quot;23-21-09.webp&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>DNS的秘密日记～从hosts开始的物语（下）</title><link>https://www.yumeyuka.plus/posts/hosts-dns-part2/</link><guid isPermaLink="true">https://www.yumeyuka.plus/posts/hosts-dns-part2/</guid><description>从最初的HOSTS.TXT到如今庞大的DNS体系，这篇小日记记录了域名解析的发展历程</description><pubDate>Thu, 26 Sep 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;域名解析系统的发展历程&lt;/h1&gt;
&lt;p&gt;随着互联网从实验性网络演进为全球信息基础设施，**域名解析系统（DNS）**也在不断演进，以满足规模、性能与安全方面的需求。以下从早期方案到现代机制，梳理其关键发展节点。&lt;/p&gt;
&lt;h2&gt;一、主机文件时代：HOSTS.TXT（1980 年代初）&lt;/h2&gt;
&lt;p&gt;在 DNS 出现之前，所有域名解析依赖于一份集中维护的文本文件—— &lt;strong&gt;&lt;code&gt;HOSTS.TXT&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由斯坦福研究所（SRI）网络信息中心（NIC）负责更新，记录域名与 IP 地址的对应关系&lt;/li&gt;
&lt;li&gt;每台主机须定期下载并手动更新此文件，才能完成网址访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着联网设备激增，HOSTS.TXT 文件规模迅速膨胀，更新频率与分发成本骤增，系统效率和可扩展性难以为继&lt;/p&gt;
&lt;h2&gt;二、DNS 系统的诞生与层级化设计（1983 年）&lt;/h2&gt;
&lt;p&gt;为解决集中式方案的瓶颈，Paul Mockapetris 于 1983 年提出 DNS 概念，并在 RFC 882、RFC 883 中定义首版协议，后被 RFC 1034、RFC 1035 取代。&lt;br /&gt;
DNS 的核心特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分布式架构&lt;/strong&gt;：将域名空间拆分成多个负责不同子区的域名服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层级化命名&lt;/strong&gt;：以&lt;code&gt;“.”&lt;/code&gt;分隔，从根（&lt;code&gt;Root&lt;/code&gt;）到顶级域（TLD）、再到二级、三级域名，逐级查询并缓存结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1. 通用顶级域名（gTLD）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;.com：面向各类商业实体与企业的网站；&lt;/li&gt;
&lt;li&gt;.org：主要供非营利组织及公益机构使用；&lt;/li&gt;
&lt;li&gt;.net：最初为网络服务提供商设计，现广泛用于互联网基础设施相关站点；&lt;/li&gt;
&lt;li&gt;.edu：专用于经认证的教育机构及其下属学术单位；&lt;/li&gt;
&lt;li&gt;.gov/.mil：分别保留给美国政府机构与军事部门。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;2. 国家和地区顶级域名（ccTLD）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以 ISO 3166-1 alpha-2 两字母代码表示，例如 .cn（中国）、.uk（英国）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 二级及多级域名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二级域名&lt;/strong&gt;：通常为组织或品牌标识，如 example.com 中的 example。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三级域名&lt;/strong&gt;及更高级别，通常用于区分子业务或区域服务，如 www.example.com、mail.google.com。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.yumeyuka.plus/2025/09/38972fb919b93dc6969bd72161fa71a9.webp&quot; alt=&quot;image-20250926173701750&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;4. 安全扩展：DNSSEC（1990 年代末至今)&lt;/h3&gt;
&lt;p&gt;随着网络安全威胁加剧，原生 DNS 缺乏数据完整性与身份验证机制，易受到中间人和缓存投毒攻击。为此，**DNS 安全扩展（DNSSEC）**应运而生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 DNS 记录链使用数字签名，确保查询结果未被篡改；&lt;/li&gt;
&lt;li&gt;客户端验证签名后，方可信任域名映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;三、根域名服务器的全球部署&lt;/h2&gt;
&lt;p&gt;DNS 根服务器最初仅部署于美国境内。为降低查询延迟、提升容灾能力，13 个逻辑根服务器实例通过 Anycast 技术，现已分布在全球多个节点，由不同组织共同管理。&lt;/p&gt;
&lt;h3&gt;为什么根服务器逻辑上只有 13 个？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UDP 包大小限制&lt;/strong&gt;：DNS 查询默认使用 UDP，最大报文长度 512 字节；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根提示文件&lt;/strong&gt;：需在此限制内携带所有根服务器的 IP 列表；&lt;/li&gt;
&lt;li&gt;13 个 IPv4 地址（另含 IPv6 扩展）恰能兼顾完整性与报文大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了支持中文、阿拉伯文、韩文等非拉丁字符，&lt;strong&gt;国际化域名（IDN&lt;/strong&gt;于 2000 年代推行。IDN 采用 Punycode 将 Unicode 字符映射为 ASCII，以兼容现有 DNS 协议，实现全球多语言域名互访。&lt;/p&gt;
</content:encoded></item><item><title>DNS的秘密日记～从hosts开始的物语（上）</title><link>https://www.yumeyuka.plus/posts/hosts_dns_part1/</link><guid isPermaLink="true">https://www.yumeyuka.plus/posts/hosts_dns_part1/</guid><description>从hosts酱到DNS君的故事～带你认识域名解析的基础原理，理解为什么修改hosts能直连</description><pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;hosts 是什么？&lt;/h2&gt;
&lt;p&gt;很久以前，互联网刚起步时，全世界的主机数量极少，域名解析完全依赖于每台设备本地的 &lt;code&gt;hosts&lt;/code&gt; 文件。这份文件里记录了互联网上所有主机的域名和对应 IP 地址。当时并没有 DNS 服务器，大家只要从专门的维护站点下载最新的 &lt;code&gt;hosts&lt;/code&gt; 文件，就能直接在本机通过它完成访问。想访问哪个域名，就翻开 &lt;code&gt;hosts&lt;/code&gt; 文件，找到对应的 IP，连上就行了。&lt;/p&gt;
&lt;p&gt;但随着互联网用户和服务器数量的爆炸式增长，所有人都去同一个地方拉 &lt;code&gt;hosts&lt;/code&gt; 文件，文件体量越来越大、更新也越来越频繁，单是检索就耗费不少时间，根本难以支撑庞大且分布全球的网络。&lt;/p&gt;
&lt;p&gt;当你打开 &lt;code&gt;hosts&lt;/code&gt; 文件，会看到这样的记录：&lt;/p&gt;
&lt;p&gt;Windows 路径：&lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;&lt;br /&gt;
Linux 路径：&lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1       localhost
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
20.205.243.166  github.com
61.91.161.217   www.google.com
61.91.161.217   google.com
61.91.161.217   gcr.io
…
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最常见的第一行 &lt;code&gt;127.0.0.1 localhost&lt;/code&gt;，就是把域名 &lt;code&gt;localhost&lt;/code&gt; 直接映射到本机。第 5 行的内容告诉我们：访问 &lt;code&gt;github.com&lt;/code&gt; 时，直接连到 &lt;code&gt;20.205.243.166&lt;/code&gt;。一看 IP 在前、域名在后，就能瞬间明白 &lt;code&gt;hosts&lt;/code&gt; 文件的作用了——把域名和 IP 直接绑在一起。&lt;/p&gt;
&lt;h2&gt;DNS 是什么？&lt;/h2&gt;
&lt;p&gt;DNS（Domain Name System，域名系统）则是后来应运而生的一套分布式数据库，专门负责把人类更易记的域名（如 &lt;code&gt;www.example.com&lt;/code&gt;）转换为计算机能识别的 IP 地址（如 &lt;code&gt;192.0.2.1&lt;/code&gt; 或 &lt;code&gt;2001:db8::1&lt;/code&gt;）。可以把 DNS 想象成电话簿，名字是域名，电话号码则是 IP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条域名解析记录可以对应多个 IP，所以你在浏览器地址栏输入 &lt;code&gt;google.com&lt;/code&gt; 或 &lt;code&gt;www.google.com&lt;/code&gt; 都能访问同一个网站。&lt;/li&gt;
&lt;li&gt;浏览器访问时会先加上 &lt;code&gt;https://&lt;/code&gt;，但根本原因还是 DNS 把域名转成 IP。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过，在中国大陆访问 Google 时，由于 GFW（防火长城）会检测到域名里含有“Google”这样的关键词，它会伪装成 DNS 服务器给你返回一个错误甚至恶意的 IP。因为 DNS 查询通常基于无连接、且不可靠的 UDP 协议，浏览器只会接受第一个格式正确的响应，后续正常响应就被丢弃了，于是就连不上了。这种现象叫 &lt;strong&gt;DNS 缓存污染&lt;/strong&gt; 或 &lt;strong&gt;DNS 投毒&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：从修改 hosts 文件科学上网中理解 DNS（上）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;DNS 解析流程与多 IP 负载&lt;/h2&gt;
&lt;p&gt;当一个域名在其权威 DNS 记录中有多个 IP 时，Local DNS（LDNS）会把它们全部返回，并随机打乱顺序。浏览器通常默认选第一个 IP 去访问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器向 LDNS 发起解析请求。&lt;/li&gt;
&lt;li&gt;LDNS 递归查询上级 DNS 服务器，直到权威 DNS。&lt;/li&gt;
&lt;li&gt;权威 DNS 返回所有 IP，顺序随机。&lt;/li&gt;
&lt;li&gt;浏览器挑第一个 IP 连接，若无反向代理，每个 IP 被访问的机会大致相等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![DNS解析流程示意图](https://img.nightrainmilkyway.cn/img/v2-c3392cab45f8241c0369ec6457000df8_144名篡改与劫持&lt;/p&gt;
&lt;h3&gt;修改 hosts 劫持解析&lt;/h3&gt;
&lt;p&gt;本地解析优先级：&lt;code&gt;hosts &amp;gt; DNS&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你在 &lt;code&gt;/etc/hosts&lt;/code&gt; （或 Windows 的 &lt;code&gt;hosts&lt;/code&gt;）中写入某条记录后，系统会直接使用本地的映射，完全绕过远程 DNS。&lt;/li&gt;
&lt;li&gt;这也是为什么很多翻墙教程里教你修改 &lt;code&gt;hosts&lt;/code&gt;，可以直接“直连” GitHub、Google 等被屏蔽的网站。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 修改前，ping 到真实公网 IP
ping linuxido.com
# dig 查看到的也是 123.56.94.254

# 在 /etc/hosts 里追加
echo &apos;120.120.120.120 linuxido.com&apos; &amp;gt;&amp;gt; /etc/hosts

# 修改后，ping 走本地 hosts 指定的 IP
ping linuxido.com  # 会尝试连 120.120.120.120
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但注意，&lt;code&gt;dig&lt;/code&gt;、&lt;code&gt;host&lt;/code&gt;、&lt;code&gt;nslookup&lt;/code&gt; 等工具在默认查询时还是会去 DNS 服务器（如 8.8.8.8）抓记录，不走 hosts，所以它们依然会返回真实的公网 IP。&lt;/p&gt;
&lt;h3&gt;DNS 劫持与污染&lt;/h3&gt;
&lt;p&gt;真正的 DNS 劫持是指攻击者或中间人伪造 DNS 响应，把域名指向恶意 IP；&lt;strong&gt;DNS 缓存污染&lt;/strong&gt;（DNS cache pollution）便是中毒后的 DNS 服务器缓存了错误的记录，导致所有下游用户都被“毒害”。&lt;/p&gt;
&lt;p&gt;防范方法包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用可信的 DNS-over-HTTPS（DoH）或 DNS-over-TLS（DoT）服务；&lt;/li&gt;
&lt;li&gt;开启 DNSSEC 验证，确保收到的响应带有数字签名且未被篡改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;用 hosts 实现科学上网&lt;/h2&gt;
&lt;p&gt;以 GitHub 为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;20.205.243.166  github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当你修改 hosts，把 &lt;code&gt;github.com&lt;/code&gt; 指向官方最快 IP，系统就不再走中国大陆的 DNS，而是直接根据本地映射去连接，这样就能“直连”GitHub。不过单靠 hosts 有时也不够流畅，通常还会配合 FastGithub 等加速工具一起使用。&lt;/p&gt;
</content:encoded></item></channel></rss>